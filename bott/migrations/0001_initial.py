# -*- coding: utf-8 -*-
# Generated by Django 1.10.2 on 2016-10-15 12:55
from __future__ import unicode_literals

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('add_date', models.DateTimeField(auto_now_add=True, verbose_name='date added')),
                ('mod_date', models.DateTimeField(auto_now=True, verbose_name='date edited')),
                ('used_date', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='date used')),
                ('disabled', models.BooleanField(db_index=True, default=False, verbose_name='disabled')),
                ('disabled_date', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='date disabled')),
                ('enabled_date', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='date enabled')),
                ('username', models.CharField(max_length=255, verbose_name='username')),
                ('password', models.CharField(max_length=255, verbose_name='password')),
            ],
            options={
                'verbose_name_plural': 'VPN accounts',
                'verbose_name': 'VPN account',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('add_date', models.DateTimeField(auto_now_add=True, verbose_name='date added')),
                ('mod_date', models.DateTimeField(auto_now=True, verbose_name='date edited')),
                ('used_date', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='date used')),
                ('disabled', models.BooleanField(db_index=True, default=False, verbose_name='disabled')),
                ('disabled_date', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='date disabled')),
                ('enabled_date', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='date enabled')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
            ],
            options={
                'verbose_name_plural': 'locations',
                'verbose_name': 'location',
            },
        ),
        migrations.CreateModel(
            name='Network',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
                ('sess_start_id', models.PositiveSmallIntegerField(verbose_name='sessions start ID')),
                ('management_start_port', models.PositiveSmallIntegerField(help_text='Management port start number', unique=True, validators=[django.core.validators.MinValueValidator(1025)], verbose_name='management port')),
                ('source_ip_tpl', models.CharField(help_text='Example: <code>192.168.%(uid2)d.%(uid1)d</code> or <code>192.168.%(id2)d.%(id1)d</code>', max_length=30, verbose_name='source IP')),
                ('device_tpl', models.CharField(help_text='Example: <code>tun%(id)s</code> or <code>tun%(uid)s</code>, with <b>uid</b> = <b>id</b> + <b>sess_start_id</b>', max_length=20, verbose_name='device')),
                ('log_path', models.CharField(help_text='If is a folder, must be ending in <code>/</code>', max_length=255, verbose_name='log path')),
                ('openvpn_cmd_tpl', models.CharField(help_text='Available variables:<br/>- <code>%(management_port)d</code> - management port number, <b>management_port</b> = <b>management_start_port</b> + <b>id</b><br/>- <code>%(dev)s</code> - tun/tap device name<br/>- <code>%(server_ip)s</code> - VPN server IP address<br/>- <code>%(server_port)d</code> - VPN server port number<br/>- <code>%(config_file)s</code> - OpenVPN configuration file<br/>- <code>%(network_log_path)s</code> - equals to <b>log_path</b><br/>- <code>%(provider_log_path)s</code> - equals to compiled <b>Provider.log_path_tpl</b><br/>- <code>%(extra)s</code> - extra arguments specified by the provider<br/>All new lines will be replaced by spaces', max_length=255, verbose_name='OpenVPN command template')),
            ],
            options={
                'verbose_name_plural': 'networks',
                'verbose_name': 'network',
            },
        ),
        migrations.CreateModel(
            name='Provider',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('add_date', models.DateTimeField(auto_now_add=True, verbose_name='date added')),
                ('mod_date', models.DateTimeField(auto_now=True, verbose_name='date edited')),
                ('used_date', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='date used')),
                ('disabled', models.BooleanField(db_index=True, default=False, verbose_name='disabled')),
                ('disabled_date', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='date disabled')),
                ('enabled_date', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='date enabled')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
                ('ovpn_extra', models.CharField(blank=True, max_length=255, verbose_name='extra OpenVPN arguments')),
                ('log_path_tpl', models.CharField(help_text='OpenVPN log file path template; example: <code>vpn%(id)d.log</code>', max_length=255, verbose_name='OpenVPN log path')),
                ('config_file', models.CharField(max_length=255, verbose_name='OpenVPN configuration file')),
                ('sess_per_account', models.PositiveSmallIntegerField(verbose_name='sessions per account')),
                ('ip_blacklist_delay', models.PositiveIntegerField(verbose_name='IP blacklisting duration')),
                ('offline_delay', models.PositiveSmallIntegerField(verbose_name='minimum offline delay')),
                ('intercon_delay', models.PositiveSmallIntegerField(verbose_name='minimum interconnexion delay')),
                ('con_timeout', models.PositiveSmallIntegerField(verbose_name='connection setup timeout')),
                ('sock_timeout', models.PositiveSmallIntegerField(verbose_name='management socket timeout')),
                ('http_timeout', models.PositiveSmallIntegerField(verbose_name='HTTP timeout')),
                ('sess_timeout', models.PositiveIntegerField(verbose_name='session timeout')),
                ('sess_init_timeout', models.PositiveIntegerField(verbose_name='session initiation timeout')),
                ('network', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='providers', to='bott.Network', verbose_name='network')),
            ],
            options={
                'verbose_name_plural': 'VPN providers',
                'verbose_name': 'VPN provider',
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('add_date', models.DateTimeField(auto_now_add=True, verbose_name='date added')),
                ('mod_date', models.DateTimeField(auto_now=True, verbose_name='date edited')),
                ('used_date', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='date used')),
                ('disabled', models.BooleanField(db_index=True, default=False, verbose_name='disabled')),
                ('disabled_date', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='date disabled')),
                ('enabled_date', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='date enabled')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='regions', to='bott.Provider', verbose_name='provider')),
            ],
            options={
                'verbose_name_plural': 'regions',
                'verbose_name': 'region',
            },
        ),
        migrations.CreateModel(
            name='Server',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('add_date', models.DateTimeField(auto_now_add=True, verbose_name='date added')),
                ('mod_date', models.DateTimeField(auto_now=True, verbose_name='date edited')),
                ('used_date', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='date used')),
                ('disabled', models.BooleanField(db_index=True, default=False, verbose_name='disabled')),
                ('disabled_date', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='date disabled')),
                ('enabled_date', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='date enabled')),
                ('ip_address', models.GenericIPAddressField(protocol='IPv4', verbose_name='IP address')),
                ('port', models.PositiveSmallIntegerField(help_text='Server port, for instance 443', verbose_name='port')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='servers', to='bott.Location', verbose_name='location')),
            ],
            options={
                'verbose_name_plural': 'servers',
                'verbose_name': 'server',
            },
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('add_date', models.DateTimeField(auto_now_add=True, verbose_name='date added')),
                ('mod_date', models.DateTimeField(auto_now=True, verbose_name='date edited')),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'requested'), (2, 'initiated'), (3, 'active'), (4, 'closed'), (0, 'failed')], default=1, verbose_name='status')),
                ('account', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='bott.Account', verbose_name='account')),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='bott.Provider', verbose_name='provider')),
                ('server', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='bott.Server', verbose_name='server')),
            ],
            options={
                'verbose_name_plural': 'VPN sessions',
                'verbose_name': 'VPN session',
            },
        ),
        migrations.CreateModel(
            name='SessionSlot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('disabled', models.BooleanField(db_index=True, default=False, verbose_name='disabled')),
                ('disabled_date', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='date disabled')),
                ('enabled_date', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='date enabled')),
                ('sid', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='slot ID')),
                ('uid', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='unique slot ID')),
                ('management_port', models.PositiveSmallIntegerField(verbose_name='management port')),
                ('source_ip', models.GenericIPAddressField(protocol='IPv4', verbose_name='IP address')),
                ('device', models.CharField(max_length=20, verbose_name='device')),
                ('network', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='slots', to='bott.Network', verbose_name='network')),
            ],
            options={
                'verbose_name_plural': 'session slots',
                'verbose_name': 'session slot',
            },
        ),
        migrations.AddField(
            model_name='session',
            name='slot',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='session', to='bott.SessionSlot', verbose_name='slot'),
        ),
        migrations.AddField(
            model_name='location',
            name='region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='locations', to='bott.Region', verbose_name='region'),
        ),
        migrations.AddField(
            model_name='account',
            name='provider',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accounts', to='bott.Provider', verbose_name='provider'),
        ),
        migrations.AlterUniqueTogether(
            name='sessionslot',
            unique_together=set([('network', 'management_port'), ('network', 'source_ip'), ('network', 'uid'), ('network', 'sid'), ('network', 'device')]),
        ),
        migrations.AlterUniqueTogether(
            name='server',
            unique_together=set([('location', 'ip_address')]),
        ),
        migrations.AlterUniqueTogether(
            name='region',
            unique_together=set([('provider', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='location',
            unique_together=set([('region', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='account',
            unique_together=set([('provider', 'username')]),
        ),
    ]
